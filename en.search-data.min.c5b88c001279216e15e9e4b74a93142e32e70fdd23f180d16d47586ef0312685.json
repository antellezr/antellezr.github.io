[{"id":0,"href":"/docs/portfolio/create-a-portfolio/","title":"Create a Portfolio Website","section":"Portfolio","content":" Create a Portfolio Website # Purpose # This document describes the process for creating a static portfolio website using Hugo and GitHub Pages.\nAudience # This document is intended for individuals interested in using Hugo and GitHub Pages to create and host a portfolio.\nOverview # To create and publish a portfolio website, take the following steps:\nCreate two GitHub repositories to host the content and the site\u0026rsquo;s files Create a Hugo site Set up the site configuration file Add content to the site Clone the GitHub Pages Site Repository Add the GitHub Site Repository as a Submodule Deploy the site using GitHub Pages Prerequisites # Before you begin this guide you must:\nInstall Hugo (version 0.134 or higher) Install Git Create a GitHub account Create the GitHub Repositories # This guide uses two separate repositories linked via Git submodules, following these criteria:\nContent Repository: Stores Markdown content, Hugo configuration files, and themes subdirectories. Site Repository: Contains the HTML, CSS, and JavaScript files generated by Hugo. A Git submodule is a repository nested inside another repository, enabling you to manage content separately from deployment files while keeping them linked. Using a submodule ensures that updates to your website\u0026rsquo;s source code do not directly affect the published site until changes are explicitly pushed.\nContent Repository # To create the source content repository from GitHub\u0026rsquo;s web UI, follow the next steps:\nGo to your GitHub dashboard.\nGitHub Dashboard In the upper-right corner of the page, select the New Repository option from the + drowpdown list, as shown in Figure 1.\nFigure 1. Create a New Repository\nFrom the Owner dropdown list, select the account you want to own the repository.\nType the name of your repository, in this example, source\nSelect Public as the repository visibility. To learn more about public and private repositories, see About repository visibility.\nClick the Create repository button at the bottom of the page.\nFigure 2 displays the the repository overview page.\nFigure 2. Repository Overview Page Preview\nNote: You can also create a repository using the GitHub CLI. To learn more, see gh repo create in the GitHub CLI documentation.\nSite Repository # Create the site repository using a similar process:\nGo to your GitHub dashboard.\nGitHub Dashboard Select the New Repository option from the + drowpdown list. From the Owner dropdown list, select the account you want to own the repository. Type {github-username}.github.io as the name of your repository. Select Public as the repository visibility. Click the Create repository button. Note: Use your {github-username}.github.io as the repository name for a shorter URL when the site is deployed. Alternatively, you can choose a different repository name, but the site’s URL will then appear as {github-username}.github.io/{repository-name}.\nCreate a Hugo site # Hugo is a static site generator that transforms Markdown files into a structured website. This section covers setting up a new Hugo project and configuring it with a theme. To create a new Hugo site in your source directory using the Hugo Book theme, follow the next steps:\nIn the location of your choice, clone the source repository:\ngit clone https://github.com/{github-username}/source.git Change to your source directory:\ncd source Create a new Hugo site:\nhugo new site {hugo-site-name} The root directory structure for your project is created.\nChange into the site directory:\ncd {hugo-site-name} Add the Hugo Book theme as a Git submodule:\ngit submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book Set the theme in the hugo.toml site configuration file.\necho \u0026#34;theme = \u0026#39;hugo-book\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml Set Up the Site Configuration File # The hugo.toml configuration file is the main settings file for a Hugo site. It defines site-wide configuration options that control how Hugo generates and structures the static site, including:\nSite metadata Theme configuration Content settings Custom parameters Edit the hugo.toml configuration file to match your site details:\nbaseURL = \u0026#39;https://{github-username}.github.io/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;{User Name} Portfolio\u0026#39; theme = \u0026#39;hugo-book\u0026#39; # Shortcodes support [markup] [markup.goldmark.renderer] unsafe = true Add Content to the Site # The Hugo Book theme includes an exampleSite directory with sample pages and blog posts that showcase the theme’s features. These examples serve as the starting point for this guide.\nTo copy the content of the exampleSite subdirectory to your root directory, use the following command:\ncp -R themes/hugo-book/exampleSite/content.en/* ./content By default, the theme renders pages from the /content/docs section as a menu in a tree structure. You can set title and weight in the front matter of pages to adjust the order and titles in the menu, as well as other parameters to hide or alter URLs in the menu.\nAlternatively, you can create new content manually using the following command:\nhugo new content content/posts/my-first-post.md Note: For more information about content types in Hugo, see the Content Management section of the Hugo documentation.\nClone the GitHub Pages Site Repository # To clone the GitHub Pages Site Repository, follow the next steps:\nNavigate back to the parent directory:\ncd .. Clone the GitHub Pages repository:\nclone repo https://github.com/{github-username}/{github-username}.github.io.git Navigate into the repository:\ncd {github-username}.github.io Create a README file:\nTouch README.md Commit and push the README file to the repository:\ngit add . git commit -m \u0026#34;Adds README\u0026#34; git push origin main Add the GitHub Site Repository as a Submodule # To connect your Hugo project to the GitHub Pages repository, follow these steps.\nReturn to the Hugo root directory:\ncd ../source/{hugo-site-name} Add the site repository as a submodule:\ngit submodule add -b main https://github.com/{github-username}/{github-username}.github.io.git public Verify the submodule was added:\nls public Ensure the public folder contains a README.md file.\nDeploy the Site Using GitHub Pages # To make your Hugo site publicly accessible, you need to generate the static website files and deploy them to GitHub Pages. Follow these steps to build and publish your site.\nStart the local development server:\nhugo server Note: This command starts the local server and enables you to view your site in the browser. To stop the server, press Ctrl + C.\nGenerate the static website:\nhugo -t hugo-book Navigate to the public directory:\ncd public Commit and push:\ngit add . git commit -m \u0026#34;Initial site deployment\u0026#34; git push origin main Once the public directory is pushed, your site is live at:\nhttps://{github-username}.github.io/ "},{"id":1,"href":"/docs/profile/","title":"Profile","section":"Docs","content":" Welcome # Hello! I’m Angel, a technical writer and connector of dots who loves turning scattered ideas into clear and practical documentation.\nMy experience as a technical writer, combined with my background in IT and service management, has given me a unique perspective on how information flows across different teams and industries. Working on projects in media, news, publishing, retail, and consulting has further shaped my ability to craft user-friendly documentation that truly makes an impact.\nI specialize in analyzing complex processes, finding opportunities for improvement, and weaving it all into a cohesive solution. Whether I’m creating style guides and training materials or supporting digital transformation efforts, I stay focused on what readers actually need.\nI’ve been recognized for blending deep technical knowledge with strategic thinking, offering insights that guide documentation direction, strengthen team dynamics, and spark new ideas. With a natural leadership style and a proactive approach, I enjoy building strong partnerships across teams to keep projects moving forward.\nI’m here to simplify the complex so people can work better, faster, and with greater confidence.\nWant to know more about my work? See my portfolio.\nSkills # Core Competencies # Information Architecture\nDocumentation Standardization\nCross-Functional Collaboration\nAudience Analysis\nDocumentation Scoping\nGap Analysis\nAgile Scrum Methodology\nContent Expertise # API documentation\nSoftware Architecture Guides\nREADMEs\nSequence Diagrams\nUser Guides\nDeveloper Guides\nTechnical Specifications\nOnboarding and Training Documentation\nTools \u0026amp; Technologies # Docs-as-Code\nMarkdown\nGit and GitHub\nJIRA\nConfluence\nOpen API Spec (Swagger)\nAI-Driven Automation\nMS Office\nProjects # Media \u0026amp; Publishing Industry # Contributed to improving API documentation and migrating content to a new developer portal while minimizing disruptions.\nAPI Documentation Audit: Audited API documentation and contributed to an improved API specification workflow. Docs-as-Code Migration: Contributed to the migration of documentation to a new developer portal, ensuring seamless accessibility for users. AI-Driven Scripting: Automated two critical tasks: Link Updates: Automated the process of scanning and updating outdated image links in Markdown files. URL Redirects: Converted and redirected legacy URLs, restoring 86% of broken links and proposing likely matches for the remaining cases. This approach reduced manual effort, sped up the migration, and ensured customers and internal teams quickly regained seamless access to essential documentation.\nNews Media Industry # As part of a large-scale CMS migration, I created comprehensive technical documentation to support backend, frontend, and QA teams.\nBackend Migration Documentation: Outlined every stage of the migration process—from initial discovery and architecture design to development and launch—providing teams with a clear roadmap for similar projects. Event-Driven Architecture: Developed guides on WebSocket events and AWS Lambda functions, helping developers transition to the new event model. QA Automation Framework: Developed detailed documentation for a Playwright/TypeScript testing solution, enabling end-to-end testing and CI/CD integration. User Access and Paywall Management: Documented subscription tiers and paywall structures to ensure consistent experiences across platforms. This documentation empowered cross-functional teams to adopt new technologies efficiently and ensured a smoother transition.\nConsulting \u0026amp; Accounting Industry # Improved API documentation consistency and introduced automation to streamline content creation.\nAPI Documentation Standardization: Unified structure and terminology across multiple products, improving clarity. Markdown-to-HTML Automation: Developed a semi-automated process to convert Markdown tables to HTML, reducing documentation time by 66%. AI/ML Tool Documentation POC: Created a structured proof-of-concept for documenting an AI/ML-based tool, emphasizing how documentation can scale alongside development. These initiatives enhanced documentation efficiency and reduced manual effort across teams.\nMedia \u0026amp; Entertainment Industry # Developed process-oriented documentation and operational guides to improve workflows across design, QA, and engineering teams.\nOperational Runbooks: Created process documentation, templates, and guides for various teams. Self-Guided Onboarding: Designed an onboarding framework that reduced ramp-up time by 50%. Incident Management: Introduced post-mortem templates and a Known-Error knowledge base to improve incident resolution. These efforts streamlined onboarding, reduced response times, and improved knowledge sharing.\nRetail Industry # Led documentation efforts to improve internal processes.\nIT Infrastructure Documentation: Developed guides covering architecture, DevOps, CI/CD, and software engineering best practices. Internal Style Guide and Templates: Standardized documentation practices across multiple teams, leading to widespread adoption among the company. Technical Writing Training: Facilitated best practices training for internal business analysts, enhancing documentation quality. Centralized Documentation Hub: Developed a structured knowledge base to organize and display technical content effectively. By implementing structured documentation and training, I improved team efficiency and knowledge sharing across the organization.\nInternal Initiatives # Beyond project-based work, I have contributed to initiatives that enhance technical writing culture and onboarding processes.\nTW Buddy Program: Launched a peer-support initiative to help new team members integrate smoothly. Onboarding Documentation: Consolidated essential information into a Quick-Start Guide, reducing information overload for new hires. These initiatives promoted a stronger technical writing community and improved onboarding experiences.\nEducation # B.S. in Computer Science Engineering (2007)\nTechnological Institute of Celaya, Mexico.\n"},{"id":2,"href":"/docs/portfolio/script-doc/","title":"Script Documentation","section":"Portfolio","content":" Downloads Organizer Script Documentation # Purpose # This document describes the structure and functionality of a Python script that organizes files in the Downloads directory on macOS by categorizing them into predefined folders based on file size, type, and directory status.\nAudience # Individuals with basic programming knowledge who wish to automate file organization tasks.\nOverview # The script automates the organization of files within the Downloads directory. It:\nGroups files exceeding a specified size into a dedicated folder. Separates files without extensions into a separate folder. Categorizes files with extensions into subdirectories based on their extension. Moves all subdirectories into a designated folder. This document provides a comprehensive explanation of how the script functions and how users can execute it.\nShow complete script Script Code # import os import shutil # Define the root directory (Downloads folder) and the main folder structure DOWNLOADS_DIR = os.path.expanduser(\u0026#34;~/Downloads\u0026#34;) BIG_FILES_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;01-BIG FILES\u0026#34;) UNKNOWN_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;02-UNKNOWN\u0026#34;) FILE_TYPES_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;03-FILE TYPES\u0026#34;) FOLDERS_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;04-FOLDERS\u0026#34;) # Ensure the main directories exist os.makedirs(BIG_FILES_DIR, exist_ok=True) os.makedirs(UNKNOWN_DIR, exist_ok=True) os.makedirs(FILE_TYPES_DIR, exist_ok=True) os.makedirs(FOLDERS_DIR, exist_ok=True) # Exclude the script file itself and main folders SCRIPT_NAME = os.path.basename(__file__) MAIN_FOLDERS = {\u0026#34;01-BIG FILES\u0026#34;, \u0026#34;02-UNKNOWN\u0026#34;, \u0026#34;03-FILE TYPES\u0026#34;, \u0026#34;04-FOLDERS\u0026#34;} def get_file_size(file_path): \u0026#34;\u0026#34;\u0026#34;Get the size of a file in bytes.\u0026#34;\u0026#34;\u0026#34; return os.path.getsize(file_path) def move_file(file_path, target_dir): \u0026#34;\u0026#34;\u0026#34;Move a file to the target directory, creating the directory if needed.\u0026#34;\u0026#34;\u0026#34; os.makedirs(target_dir, exist_ok=True) shutil.move(file_path, target_dir) def organize_files(directory): \u0026#34;\u0026#34;\u0026#34;Organize files in the given directory based on their extensions.\u0026#34;\u0026#34;\u0026#34; for item in os.listdir(directory): item_path = os.path.join(directory, item) # Skip the script itself and main folders if item == SCRIPT_NAME or item in MAIN_FOLDERS: continue # Move existing folders to 04-FOLDERS if os.path.isdir(item_path): move_file(item_path, FOLDERS_DIR) continue # Skip hidden files if item.startswith(\u0026#34;.\u0026#34;): continue # Handle files larger than 500 MB if get_file_size(item_path) \u0026gt; 500 * 1024 * 1024: move_file(item_path, BIG_FILES_DIR) continue # Handle files without extensions if \u0026#34;.\u0026#34; not in item: move_file(item_path, UNKNOWN_DIR) continue # Organize by file extension ext = item.split(\u0026#34;.\u0026#34;)[-1].lower() ext_dir = os.path.join(FILE_TYPES_DIR, ext.upper()) move_file(item_path, ext_dir) def process_big_files(): \u0026#34;\u0026#34;\u0026#34;Organize files inside the BIG_FILES_DIR by their extensions.\u0026#34;\u0026#34;\u0026#34; for item in os.listdir(BIG_FILES_DIR): item_path = os.path.join(BIG_FILES_DIR, item) # Skip directories and hidden files if os.path.isdir(item_path) or item.startswith(\u0026#34;.\u0026#34;): continue # Organize by file extension if \u0026#34;.\u0026#34; in item: ext = item.split(\u0026#34;.\u0026#34;)[-1].lower() ext_dir = os.path.join(BIG_FILES_DIR, ext.upper()) move_file(item_path, ext_dir) # Run the script if __name__ == \u0026#34;__main__\u0026#34;: print(\u0026#34;Organizing files in the Downloads folder...\u0026#34;) organize_files(DOWNLOADS_DIR) print(\u0026#34;Organizing files in the \u0026#39;01-BIG FILES\u0026#39; folder...\u0026#34;) process_big_files() print(\u0026#34;Organization complete.\u0026#34;) Prerequisites # Ensure the following before running the script:\nPython: Install Python version 3.6 or later. Permissions: Confirm you have read and write access to the Downloads directory. Terminal: Basic understanding of using the terminal or command prompt to execute Python scripts. Running the Script # To execute the script, follow these steps:\nSave the script file as organize_downloads.py in your Downloads directory.\nOpen a terminal or command prompt.\nNavigate to the Downloads directory:\ncd ~/Downloads Run the script using the following command:\npython organize_downloads.py The script displays messages indicating its progress.\nScript Structure and Explanation # This section provides detailed information about the script’s structure and functionality.\nInitialization # The script begins by defining the Downloads directory and four subdirectories for file organization:\nDOWNLOADS_DIR = os.path.expanduser(\u0026#34;~/Downloads\u0026#34;) BIG_FILES_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;01-BIG FILES\u0026#34;) UNKNOWN_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;02-UNKNOWN\u0026#34;) FILE_TYPES_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;03-FILE TYPES\u0026#34;) FOLDERS_DIR = os.path.join(DOWNLOADS_DIR, \u0026#34;04-FOLDERS\u0026#34;) Each folder serves a specific purpose:\n01-BIG FILES: Files larger than 500 MB. 02-UNKNOWN: Files without extensions. 03-FILE TYPES: Files categorized by their extensions. 04-FOLDERS: Existing subdirectories from the Downloads directory. Directory Creation # The script ensures these folders exist and prevents errors if the directories are already present.\nos.makedirs(directory_name, exist_ok=True) Utility Functions # get_file_size # This function calculates the size of a file in bytes and identifies files that exceed the 500 MB size threshold.\ndef get_file_size(file_path): return os.path.getsize(file_path) move_file # This function moves a file to a specified directory.\ndef move_file(file_path, target_dir): os.makedirs(target_dir, exist_ok=True) shutil.move(file_path, target_dir) Main Functions # organize_files Function # This function processes the contents of the Downloads directory:\ndef organize_files(directory): for item in os.listdir(directory): item_path = os.path.join(directory, item) if item == SCRIPT_NAME or item in MAIN_FOLDERS: continue if os.path.isdir(item_path): move_file(item_path, FOLDERS_DIR) elif item.startswith(\u0026#34;.\u0026#34;): continue elif get_file_size(item_path) \u0026gt; 500 * 1024 * 1024: move_file(item_path, BIG_FILES_DIR) elif \u0026#34;.\u0026#34; not in item: move_file(item_path, UNKNOWN_DIR) else: ext = item.split(\u0026#34;.\u0026#34;)[-1].lower() ext_dir = os.path.join(FILE_TYPES_DIR, ext.upper()) move_file(item_path, ext_dir) The script follows a structured approach to sort and categorize files by:\nSkipping Specific Items: The script skips:\nThe script file itself. Predefined main folders. Hidden files (files starting with a dot). Managing Large Files: Files larger than 500 MB are moved to 01-BIG FILES.\nIdentifying Files Without Extensions: These are moved to 02-UNKNOWN.\nCategorizing Files with Extensions: Files are categorized into extension-specific subdirectories under 03-FILE TYPES.\nSubdirectory Handling: Subdirectories are moved to 04-FOLDERS.\nprocess_big_files Function # After organizing files, the process_big_files function categorizes files within the 01-BIG FILES folder by their extensions:\ndef process_big_files(): for item in os.listdir(BIG_FILES_DIR): item_path = os.path.join(BIG_FILES_DIR, item) if os.path.isdir(item_path) or item.startswith(\u0026#34;.\u0026#34;): continue if \u0026#34;.\u0026#34; in item: ext = item.split(\u0026#34;.\u0026#34;)[-1].lower() ext_dir = os.path.join(BIG_FILES_DIR, ext.upper()) move_file(item_path, ext_dir) Script Execution # The script’s execution starts with:\nif __name__ == \u0026#34;__main__\u0026#34;: print(\u0026#34;Organizing files in the Downloads folder...\u0026#34;) organize_files(DOWNLOADS_DIR) print(\u0026#34;Organizing files in the \u0026#39;01-BIG FILES\u0026#39; folder...\u0026#34;) process_big_files() print(\u0026#34;Organization complete.\u0026#34;) The script execution follows the next steps:\nCalls organize_files to process the Downloads directory. Calls process_big_files to handle large files. Displays messages to indicate progress and completion. "},{"id":3,"href":"/docs/portfolio/","title":"Portfolio","section":"Docs","content":" Portfolio # Welcome to my portfolio, a curated collection of technical writing samples that showcase my expertise in documentation strategy, information architecture, and content development.\nEach sample reflects my approach to creating clear, structured, and user-focused documentation.\nBrowse through the entries below to explore my work, and feel free to reach out if you have any questions.\nCreate a Portfolio Website Downloads Organizer Script Documentation "},{"id":4,"href":"/posts/why-hugo-and-github-pages/","title":"Why Choose Hugo and GitHub Pages to Host Your Portfolio","section":"Blog","content":"If you’re looking for a simple, fast, and reliable way to build your portfolio or personal website, Hugo and GitHub Pages are a great combination. Hugo is a powerful static site generator that makes creating a website straightforward, and GitHub Pages offers free hosting with built-in version control. Together, they provide a lightweight, flexible solution for anyone who wants a professional-looking website without dealing with complex server configurations.\nThis post walks you through:\nWhat Hugo is and why it’s a great choice for static sites How GitHub Pages works and why it’s ideal for hosting your site Even if you’ve never used a static site generator before, this post will help you understand what a site generator is and why you should give it a try.\nWhat is Hugo? # Hugo is a static site generator designed to help you create fast, efficient websites with minimal effort. Unlike traditional website builders that rely on databases and dynamic rendering, Hugo generates static HTML files that load quickly and require no backend server. This makes it a great choice for portfolios, blogs, and documentation sites.\nWhy Use Hugo? # Hugo provides various features that make building and managing a website easier:\nFast: Hugo can generate thousands of pages in seconds, making it one of the fastest static site generators available. Flexible and Customizable: Enables you to choose from multiple themes and templates or create your own layout. Markdown-Based: Write your content in Markdown, a simple and readable format. Built-in Live Preview: Instantly see changes as you edit with Hugo’s local development server. Key Benefits # Since Hugo generates static HTML files, your site will be:\nFast: Pages load instantly without server-side processing. Secure: No backend vulnerabilities, making it less prone to attacks. Easy to Maintain: Keep content and design separate, so updates are a breeze. If you want a website that is lightweight, high-performance, and simple to manage, Hugo is an excellent tool to get the job done.\nWhat is GitHub Pages? # GitHub Pages is a free hosting service provided by GitHub that lets you publish static websites directly from a GitHub repository. It’s a perfect match for Hugo because it allows you to deploy your site with just a few git commands.\nWhy Host Your Hugo Site on GitHub Pages? # GitHub Pages comes with several advantages:\nFree Hosting: No hidden costs; just push your code, and your site is live. Automatic Deployment: Any updates you commit are reflected on your site immediately. Custom Domains: Give you the option to use a personalized URL for a professional look. HTTPS Security: Protects your site and visitors with built-in HTTPS support. Built-in Version Control: Tracks changes and collaborate with others effortlessly. How It Works # GitHub Pages serves static files directly from a specific branch in your repository. When you push updates, GitHub automatically rebuilds and deploys your site—no need to manually configure a server.\nWhy Combine Hugo with GitHub Pages? # Using Hugo with GitHub Pages is a great way to streamline your website workflow:\nSpeed and Efficiency: Hugo generates the site instantly, and GitHub Pages deploys it seamlessly. No Server Setup Required: No need to deal with complex hosting configurations. Great for Collaboration: If you’re working on a team, GitHub makes it easy to manage updates. With this setup, you can focus on creating content rather than troubleshooting servers. It’s a hassle-free way to build a polished, professional website that runs smoothly.\nIf you want to learn more about how to set up your portfolio from scratch using these tools, see Create a Portfolio Website.\n"},{"id":5,"href":"/docs/profile/hidden/","title":"Hidden","section":"Profile","content":" This page is hidden in menu (PEER REVIEW TEST) # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":6,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":7,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\nExample # {{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns # {{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":8,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Title Markdown content # Lorem markdownum insigne\u0026hellip;\n"},{"id":9,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":10,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":11,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nSecond Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":12,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":13,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":14,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{% tabs \u0026#34;id\u0026#34; %}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{% /tabs %}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":15,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\] Text continues here.\n"}]